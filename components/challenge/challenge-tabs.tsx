"use client"

import { useState, useEffect, useCallback, useMemo } from "react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import OptimizedChallengeGrid from "@/components/optimized/optimized-challenge-grid"
import CreateChallengeModal from "@/components/challenge/create-challenge-modal"
import { fetchAllChallenges, fetchCurrentChallenge } from "@/app/actions/challenge-videos"
import { type Challenge } from '@/utils/challenge-constants'
import { toast } from "@/hooks/use-toast"
import { useDebounce } from "@/hooks/use-performance"

interface ChallengeTabsProps {
  searchTerm: string
  onSelectedChallengeChange: (challenge: Challenge | null) => void
}

export default function ChallengeTabs({
  searchTerm,
  onSelectedChallengeChange
}: ChallengeTabsProps) {  const [challenges, setChallenges] = useState<Challenge[]>([])
  const [userChallenges, setUserChallenges] = useState<Challenge[]>([])
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState("")
  const [activeTab, setActiveTab] = useState("all")
  const [loading, setLoading] = useState(true)
  const [createModalOpen, setCreateModalOpen] = useState(false)

  // Debounced search to avoid excessive filtering
  const debouncedSearch = useDebounce((term: string) => {
    setDebouncedSearchTerm(term)
  }, 300)

  // Update debounced search term when search term changes
  useEffect(() => {
    debouncedSearch(searchTerm)
  }, [searchTerm, debouncedSearch])

  // Debounced localStorage save function
  const debouncedSaveToLocalStorage = useMemo(
    () => debounce((key: string, data: any) => {
      try {
        // Only save essential data to localStorage
        const essentialData = data.map((challenge: Challenge) => ({
          id: challenge.id,
          title: challenge.title,
          description: challenge.description,
          difficulty: challenge.difficulty,
          duration: challenge.duration,
          createdAt: challenge.createdAt,
          thumbnailUrl: challenge.thumbnailUrl,
          videoUrl: challenge.videoUrl,
          // Skip large fields like topics array if not essential
        }))
        localStorage.setItem(key, JSON.stringify(essentialData))
      } catch (error) {
        console.error('Error saving to localStorage:', error)
        // If localStorage is full, clear old data
        if (error instanceof Error && error.name === 'QuotaExceededError') {
          localStorage.removeItem('admin_challenges')
          localStorage.removeItem('lastChallengeRefresh')
          // Retry with smaller dataset
          try {
            localStorage.setItem(key, JSON.stringify(data.slice(0, 10)))
          } catch (retryError) {
            console.error('Failed to save even reduced data:', retryError)
          }
        }
      }
    }, 500),
    []
  )

  // Add debounce function
  function debounce<T extends (...args: any[]) => any>(func: T, wait: number): T {
    let timeout: NodeJS.Timeout
    return ((...args: any[]) => {
      clearTimeout(timeout)
      timeout = setTimeout(() => func.apply(null, args), wait)
    }) as T
  }

  // Load challenges when component mounts
  const loadChallenges = useCallback(async () => {
    try {
      setLoading(true)

      // Lấy tất cả các thử thách (sẽ bao gồm 10 video tự động + user challenges)
      const allChallenges = await fetchAllChallenges()

      // Separate auto-generated and user-created challenges
      const autoGeneratedChallenges = allChallenges.filter(c => c.isAutoGenerated)
      const userCreatedChallenges = allChallenges.filter(c => !c.isAutoGenerated)

      // Kiểm tra xem có thử thách đã lưu trong localStorage không
      const savedChallenges = localStorage.getItem("userChallenges")
      let localUserChallenges: Challenge[] = []

      if (savedChallenges) {
        localUserChallenges = JSON.parse(savedChallenges)
      }      // Combine: auto-generated challenges + database user challenges + local user challenges
      const combinedChallenges = [
        ...autoGeneratedChallenges, // Auto-generated videos first
        ...userCreatedChallenges,   // User challenges from database
        ...localUserChallenges      // Local user challenges
      ]        
      
      // Set separate states
      setUserChallenges([...userCreatedChallenges, ...localUserChallenges])
      setChallenges(combinedChallenges)
    } catch (error) {
      console.error("Error loading challenges:", error)
      toast({
        title: "Error",
        description: "Failed to load challenges. Please try again.",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }, [])

  useEffect(() => {
    loadChallenges()
  }, [loadChallenges])
  // Filter challenges when tab or search term changes - optimized with useMemo
  const filteredChallenges = useMemo(() => {
    let filtered: Challenge[] = []

    // Determine which challenges to filter based on active tab
    if (activeTab === "user") {
      filtered = userChallenges
    } else if (activeTab === "all") {
      filtered = challenges
    } else {
      // Filter by difficulty (beginner, intermediate, advanced)
      filtered = challenges.filter((challenge) => challenge.difficulty === activeTab)
    }

    // Apply search filter only if debounced search term exists
    if (debouncedSearchTerm) {
      const lowerSearchTerm = debouncedSearchTerm.toLowerCase()
      filtered = filtered.filter(
        (challenge) =>
          challenge.title.toLowerCase().includes(lowerSearchTerm) ||
          challenge.description.toLowerCase().includes(lowerSearchTerm),
      )
    }
    
    return filtered
  }, [challenges, userChallenges, debouncedSearchTerm, activeTab])

  // Handle challenge creation - optimized
  const handleChallengeCreated = useCallback((newChallenge: Challenge) => {
    // Thêm thử thách mới vào danh sách user challenges
    const updatedUserChallenges = [newChallenge, ...userChallenges]
    const updatedAllChallenges = [newChallenge, ...challenges]
    
    setUserChallenges(updatedUserChallenges)
    setChallenges(updatedAllChallenges)

    // Debounced localStorage save to avoid blocking UI
    debouncedSaveToLocalStorage('userChallenges', updatedUserChallenges)

    // Hiển thị thông báo thành công
    toast({
      title: "Challenge created",
      description: "Your challenge has been added to the list",
    })
    
    // Switch to user challenges tab to show the new challenge
    setActiveTab("user")
  }, [userChallenges, challenges, debouncedSaveToLocalStorage])

  // Handle when user starts a challenge
  const handleStartChallenge = useCallback((id: string) => {
    // Tìm challenge với id tương ứng
    const challenge = challenges.find(c => c.id === id)
    
    if (challenge) {
      // Set challenge được chọn để hiển thị ở "Your Current Challenge"
      onSelectedChallengeChange(challenge)
      
      toast({
        title: "Challenge started",
        description: `Started: ${challenge.title}`,
      })
      
      // Scroll lên top để user có thể thấy "Your Current Challenge"
      window.scrollTo({ top: 0, behavior: 'smooth' })
    } else {
      console.error("❌ [ChallengeTabs] Challenge not found with ID:", id)
      toast({
        title: "Error",
        description: "Challenge not found",
        variant: "destructive",
      })
    }
  }, [challenges, onSelectedChallengeChange])

  return (
    <>      <Tabs defaultValue="all" value={activeTab} onValueChange={setActiveTab} className="w-full">
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="all">All</TabsTrigger>
          <TabsTrigger value="user">Your Challenges</TabsTrigger>
          <TabsTrigger value="beginner">Beginner</TabsTrigger>
          <TabsTrigger value="intermediate">Intermediate</TabsTrigger>
          <TabsTrigger value="advanced">Advanced</TabsTrigger>
        </TabsList>        <TabsContent value="user" className="mt-6">
          <div className="mb-4">
            <h3 className="text-lg font-semibold text-foreground">Your Created Challenges</h3>
            <p className="text-sm text-muted-foreground">Challenges you've created • {userChallenges.length} available</p>
          </div>
          
          <div className="h-[600px] min-h-[600px] overflow-y-auto border rounded-lg bg-background/50">
            <div className="min-h-full p-4">
              <OptimizedChallengeGrid
                challenges={userChallenges}
                onStartChallenge={handleStartChallenge}
                loading={loading}
                emptyMessage="You haven't created any challenges yet"
                emptyAction={() => setCreateModalOpen(true)}
                emptyActionLabel="Create Your First Challenge"
                useVirtualScroll={userChallenges.length > 20}
              />
            </div>
          </div>
        </TabsContent>          
        <TabsContent value="all" className="mt-6">
          <div className="mb-4">
            <h3 className="text-lg font-semibold text-foreground">All Challenges</h3>
            <p className="text-sm text-muted-foreground">Auto-generated + User challenges • {challenges.length} total</p>
          </div>
          
          <div className="h-[600px] min-h-[600px] overflow-y-auto border rounded-lg bg-background/50">
            <div className="min-h-full p-4">
              <OptimizedChallengeGrid
                challenges={filteredChallenges}
                onStartChallenge={handleStartChallenge}
                loading={loading}
                emptyMessage="No challenges found matching your criteria"
                emptyAction={() => setCreateModalOpen(true)}
                emptyActionLabel="Create a Challenge"
                useVirtualScroll={filteredChallenges.length > 20}
                useInfiniteScroll={false}
              />
            </div>
          </div>
        </TabsContent>
          <TabsContent value="beginner" className="mt-6">
          <div className="mb-4">
            <h3 className="text-lg font-semibold text-foreground">Beginner Challenges</h3>
            <p className="text-sm text-muted-foreground">Perfect for starting your English journey • {filteredChallenges.length} available</p>
          </div>
          <div className="h-[600px] min-h-[600px] overflow-y-auto border rounded-lg bg-background/50">
            <div className="min-h-full p-4">
              <OptimizedChallengeGrid
                challenges={filteredChallenges}
                onStartChallenge={handleStartChallenge}
                loading={loading}
                emptyMessage="No beginner challenges found"
                emptyAction={() => setCreateModalOpen(true)}
                emptyActionLabel="Create a Beginner Challenge"
                useVirtualScroll={filteredChallenges.length > 20}
              />
            </div>
          </div>
        </TabsContent>        <TabsContent value="intermediate" className="mt-6">
          <div className="mb-4">
            <h3 className="text-lg font-semibold text-foreground">Intermediate Challenges</h3>
            <p className="text-sm text-muted-foreground">Level up your skills • {filteredChallenges.length} available</p>
          </div>
          <div className="h-[600px] min-h-[600px] overflow-y-auto border rounded-lg bg-background/50">
            <div className="min-h-full p-4">
              <OptimizedChallengeGrid
                challenges={filteredChallenges}
                onStartChallenge={handleStartChallenge}
                loading={loading}
                emptyMessage="No intermediate challenges found"
                emptyAction={() => setCreateModalOpen(true)}
                emptyActionLabel="Create an Intermediate Challenge"
                useVirtualScroll={filteredChallenges.length > 20}
              />
            </div>
          </div>
        </TabsContent>
          <TabsContent value="advanced" className="mt-6">
          <div className="mb-4">
            <h3 className="text-lg font-semibold text-foreground">Advanced Challenges</h3>
            <p className="text-sm text-muted-foreground">Master-level challenges • {filteredChallenges.length} available</p>
          </div>
          <div className="h-[600px] min-h-[600px] overflow-y-auto border rounded-lg bg-background/50">
            <div className="min-h-full p-4">
              <OptimizedChallengeGrid
                challenges={filteredChallenges}
                onStartChallenge={handleStartChallenge}
                loading={loading}
                emptyMessage="No advanced challenges found"
                emptyAction={() => setCreateModalOpen(true)}
                emptyActionLabel="Create an Advanced Challenge"
                useVirtualScroll={filteredChallenges.length > 20}
              />
            </div>
          </div>
        </TabsContent>
      </Tabs>

      <CreateChallengeModal
        open={createModalOpen}
        onOpenChange={setCreateModalOpen}
        onChallengeCreated={handleChallengeCreated}
      />
    </>
  )
}
