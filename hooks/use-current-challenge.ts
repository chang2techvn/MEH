"use client"

import { useState, useEffect } from "react"
import { getTodayVideo, type VideoData } from "@/app/actions/youtube-video"
import { type Challenge } from "@/lib/utils/challenge-constants"
import { useChallenge } from "@/contexts/challenge-context"

// Helper function to convert VideoData to Challenge format
function videoDataToChallenge(videoData: VideoData): Challenge {
  return {
    id: videoData.id,
    title: videoData.title,
    description: videoData.description,
    thumbnailUrl: videoData.thumbnailUrl,
    videoUrl: videoData.videoUrl,
    embedUrl: videoData.embedUrl,
    duration: videoData.duration,
    difficulty: "intermediate", // Default difficulty
    createdAt: new Date().toISOString(),
    topics: Array.isArray(videoData.topics) ? videoData.topics : [],
    featured: true,
    isAutoGenerated: true,
    dailyBatch: new Date().toISOString().split('T')[0]
  }
}

export function useCurrentChallenge() {
  const [currentChallenge, setCurrentChallenge] = useState<Challenge | null>(null)
  const [challengeLoading, setChallengeLoading] = useState(true)
  const { challengeMode, currentChallenge: practiceChallenge, resetToDaily } = useChallenge()

  useEffect(() => {
    const loadCurrentChallenge = async () => {
      try {
        if (challengeMode === 'practice' && practiceChallenge) {
          // Use practice challenge from context
          setCurrentChallenge(practiceChallenge)
          setChallengeLoading(false)
        } else {
          // Load daily challenge (default behavior)
          
          // Set loading to false immediately to show content while fetching
          setChallengeLoading(false)
          
          // Load video in background and update when ready
          getTodayVideo()
            .then(videoData => {
              const challenge = videoDataToChallenge(videoData)
              setCurrentChallenge(challenge)
              
              // If we're in practice mode but no practice challenge, reset to daily
              if (challengeMode === 'practice') {
                resetToDaily()
              }
            })
            .catch(error => {
              console.error("❌ Error loading today's video:", error)
              // Create fallback challenge if video loading fails
              const fallbackChallenge: Challenge = {
                id: 'fallback-' + Date.now(),
                title: 'Daily English Challenge',
                description: 'Practice your English skills with today\'s challenge',
                thumbnailUrl: '/placeholder.jpg',
                videoUrl: '',
                embedUrl: '',
                duration: 300,
                difficulty: "intermediate",
                createdAt: new Date().toISOString(),
                topics: ['English Learning'],
                featured: true,
                isAutoGenerated: true,
                dailyBatch: new Date().toISOString().split('T')[0]
              }
              setCurrentChallenge(fallbackChallenge)
            })
        }
      } catch (error) {
        console.error("❌ Error in loadCurrentChallenge:", error)
        setChallengeLoading(false)
      }
    }

    loadCurrentChallenge()
  }, [challengeMode, practiceChallenge, resetToDaily]) // Re-run when challenge mode or practice challenge changes

  return {
    currentChallenge,
    challengeLoading,
    challengeMode,
    setCurrentChallenge
  }
}
