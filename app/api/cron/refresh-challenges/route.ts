import { NextRequest, NextResponse } from 'next/server'
import { fetchAllChallenges } from '@/app/actions/challenge-videos'
import { cleanupExpiredChallenges, cleanupOldDailyChallenges } from '@/app/actions/challenge-database'

export async function POST(request: NextRequest) {
  try {
    // Verify cron secret for security
    const authHeader = request.headers.get('authorization')
    const cronSecret = process.env.CRON_SECRET
    
    if (!cronSecret || authHeader !== `Bearer ${cronSecret}`) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    console.log('üöÄ Starting daily challenges refresh...')

    // Step 1: Cleanup old and expired challenges
    console.log('1. Cleaning up old challenges...')
    const cleanupExpiredResult = await cleanupExpiredChallenges()
    const cleanupOldResult = await cleanupOldDailyChallenges()

    // Step 2: Generate new daily challenges (this will automatically create 10 new ones if needed)
    console.log('2. Generating new daily challenges...')
    const newChallenges = await fetchAllChallenges(3) // This will generate exactly 10 challenges for today

    // Step 3: Filter auto-generated challenges for today
    const today = new Date().toISOString().split('T')[0] // YYYY-MM-DD format
    const todayAutoGenerated = newChallenges.filter(c => 
      c.isAutoGenerated && c.dailyBatch === today
    )

    const response = {
      success: true,
      message: 'Daily challenges refreshed successfully',
      data: {
        cleanupExpired: cleanupExpiredResult,
        cleanupOld: cleanupOldResult,
        totalChallenges: newChallenges.length,
        newDailyChallenges: todayAutoGenerated.length,
        date: today
      }
    }

    console.log('‚úÖ Daily challenges refresh completed:', response.data)
    return NextResponse.json(response)

  } catch (error) {
    console.error('‚ùå Daily challenges refresh failed:', error)
    return NextResponse.json({
      success: false,
      error: 'Failed to refresh daily challenges',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// Allow GET for testing purposes (remove in production)
export async function GET(request: NextRequest) {
  const isProduction = process.env.NODE_ENV === 'production'
  
  if (isProduction) {
    return NextResponse.json({ error: 'GET method not allowed in production' }, { status: 405 })
  }

  // In development, allow GET for easy testing
  return POST(request)
}
