"use client"

import { useState, useEffect, useCallback, useMemo } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Filter, Search, Plus, Loader2, BookOpen } from "lucide-react"
import AssignedTask from "@/components/assigned-task"
import ChallengeCard from "@/components/challenge-card"
import CreateChallengeModal from "@/components/create-challenge-modal"
import { fetchAllChallenges, fetchCurrentChallenge} from "@/app/actions/challenge-videos"
import { challengeTopics, type Challenge } from '../utils/challenge-constants'
import { toast } from "@/hooks/use-toast"
import MainHeader from "@/components/main-header"
import { useDebounce } from "@/hooks/use-performance"
import OptimizedChallengeGrid from "@/components/optimized-challenge-grid"

// Add these imports at the top of the file
import { AIChatBox } from "@/components/ai-chat-box"
import { AIChatButton } from "@/components/ai-chat-button"

export default function ChallengesPage() {  const [challenges, setChallenges] = useState<Challenge[]>([])
  const [dailyChallenges, setDailyChallenges] = useState<Challenge[]>([])
  const [userChallenges, setUserChallenges] = useState<Challenge[]>([])
  const [displayedChallenges, setDisplayedChallenges] = useState<Challenge[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [debouncedSearchTerm, setDebouncedSearchTerm] = useState("")
  const [activeTab, setActiveTab] = useState("daily")
  const [loading, setLoading] = useState(true)
  const [currentChallenge, setCurrentChallenge] = useState<Challenge | null>(null)
  const [selectedChallenge, setSelectedChallenge] = useState<Challenge | null>(null) // New state for started challenge
  const [createModalOpen, setCreateModalOpen] = useState(true)
  const [mobileMenuOpen, setMobileMenuOpen] = useState(true)
  const [mounted, setMounted] = useState(false)

  // Add these state variables inside the ChallengesPage component
  const [showChatBox, setShowChatBox] = useState(false)
  const [minimizedChat, setMinimizedChat] = useState(true)

  // Debounced search to avoid excessive filtering
  const debouncedSearch = useDebounce((term: string) => {
    setDebouncedSearchTerm(term)
  }, 300)

  // Update debounced search term when search term changes
  useEffect(() => {
    debouncedSearch(searchTerm)
  }, [searchTerm, debouncedSearch])

  // Set mounted state
  useEffect(() => {
    setMounted(true)
  }, [])

  // T·∫£i th·ª≠ th√°ch khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    const loadChallenges = async () => {
      try {
        setLoading(true)

        // L·∫•y th·ª≠ th√°ch hi·ªán t·∫°i
        const todayChallenge = await fetchCurrentChallenge()
        setCurrentChallenge(todayChallenge)

        // L·∫•y t·∫•t c·∫£ c√°c th·ª≠ th√°ch (s·∫Ω bao g·ªìm 10 video t·ª± ƒë·ªông + user challenges)
        const allChallenges = await fetchAllChallenges() // Fetch daily challenges

        // Separate auto-generated and user-created challenges
        const autoGeneratedChallenges = allChallenges.filter(c => c.isAutoGenerated)
        const userCreatedChallenges = allChallenges.filter(c => !c.isAutoGenerated)

        // Ki·ªÉm tra xem c√≥ th·ª≠ th√°ch ƒë√£ l∆∞u trong localStorage kh√¥ng
        const savedChallenges = localStorage.getItem("userChallenges")
        let localUserChallenges: Challenge[] = []

        if (savedChallenges) {
          localUserChallenges = JSON.parse(savedChallenges)
        }

        // Combine: auto-generated challenges + database user challenges + local user challenges
        const combinedChallenges = [
          ...autoGeneratedChallenges, // Daily 10 videos first
          ...userCreatedChallenges,   // User challenges from database
          ...localUserChallenges      // Local user challenges
        ]        // Set separate states
        setDailyChallenges(autoGeneratedChallenges)
        setUserChallenges([...userCreatedChallenges, ...localUserChallenges])
        setChallenges(combinedChallenges)
        setDisplayedChallenges(combinedChallenges)
      } catch (error) {
        console.error("Error loading challenges:", error)
        toast({
          title: "Error",
          description: "Failed to load challenges. Please try again.",
          variant: "destructive",
        })
      } finally {
        setLoading(false)
      }
    }

    loadChallenges()
  }, [])  // L·ªçc th·ª≠ th√°ch khi tab ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm thay ƒë·ªïi - optimized with useMemo
  const filteredChallenges = useMemo(() => {
    let filtered: Challenge[] = []

    // Determine which challenges to filter based on active tab
    if (activeTab === "daily") {
      filtered = dailyChallenges
    } else if (activeTab === "user") {
      filtered = userChallenges
    } else if (activeTab === "all") {
      filtered = challenges
    } else {
      // Filter by difficulty (beginner, intermediate, advanced)
      filtered = challenges.filter((challenge) => challenge.difficulty === activeTab)
    }

    // Apply search filter only if debounced search term exists
    if (debouncedSearchTerm) {
      const lowerSearchTerm = debouncedSearchTerm.toLowerCase()
      filtered = filtered.filter(
        (challenge) =>
          challenge.title.toLowerCase().includes(lowerSearchTerm) ||
          challenge.description.toLowerCase().includes(lowerSearchTerm),
      )
    }

    return filtered
  }, [challenges, dailyChallenges, userChallenges, debouncedSearchTerm, activeTab])
  // Update displayed challenges when memo changes
  useEffect(() => {
    setDisplayedChallenges(filteredChallenges)
  }, [filteredChallenges])
  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng t·∫°o th·ª≠ th√°ch m·ªõi - optimized
  const handleChallengeCreated = useCallback((newChallenge: Challenge) => {
    // Th√™m th·ª≠ th√°ch m·ªõi v√†o danh s√°ch user challenges
    const updatedUserChallenges = [newChallenge, ...userChallenges]
    const updatedAllChallenges = [newChallenge, ...challenges]
    
    setUserChallenges(updatedUserChallenges)
    setChallenges(updatedAllChallenges)

    // Debounced localStorage save to avoid blocking UI
    debouncedSaveToLocalStorage('userChallenges', updatedUserChallenges)

    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
    toast({
      title: "Challenge created",
      description: "Your challenge has been added to the list",
    })
    
    // Switch to user challenges tab to show the new challenge
    setActiveTab("user")
  }, [userChallenges, challenges])

  // Debounced localStorage save function
  const debouncedSaveToLocalStorage = useMemo(
    () => debounce((key: string, data: any) => {
      try {
        // Only save essential data to localStorage
        const essentialData = data.map((challenge: Challenge) => ({
          id: challenge.id,
          title: challenge.title,
          description: challenge.description,
          difficulty: challenge.difficulty,
          duration: challenge.duration,
          createdAt: challenge.createdAt,
          thumbnailUrl: challenge.thumbnailUrl,
          videoUrl: challenge.videoUrl,
          // Skip large fields like topics array if not essential
        }))
        localStorage.setItem(key, JSON.stringify(essentialData))
      } catch (error) {
        console.error('Error saving to localStorage:', error)
        // If localStorage is full, clear old data
        if (error instanceof Error && error.name === 'QuotaExceededError') {
          localStorage.removeItem('admin_challenges')
          localStorage.removeItem('lastChallengeRefresh')
          // Retry with smaller dataset
          try {
            localStorage.setItem(key, JSON.stringify(data.slice(0, 10)))
          } catch (retryError) {
            console.error('Failed to save even reduced data:', retryError)
          }
        }
      }
    }, 500),
    []
  )

  // Add debounce function
  function debounce<T extends (...args: any[]) => any>(func: T, wait: number): T {
    let timeout: NodeJS.Timeout
    return ((...args: any[]) => {
      clearTimeout(timeout)
      timeout = setTimeout(() => func.apply(null, args), wait)
    }) as T
  }

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫Øt ƒë·∫ßu th·ª≠ th√°ch
  const handleStartChallenge = (id: string) => {
    console.log("üéØ [ChallengesPage] Starting challenge with ID:", id);
    console.log("üìä [ChallengesPage] Available challenges:", challenges.map(c => ({ id: c.id, title: c.title, videoUrl: c.videoUrl })));
    
    // T√¨m challenge v·ªõi id t∆∞∆°ng ·ª©ng
    const challenge = challenges.find(c => c.id === id)
    console.log("üîç [ChallengesPage] Found challenge:", challenge);
    
    if (challenge) {
      console.log("‚úÖ [ChallengesPage] Setting selected challenge:", challenge);
      console.log("üìπ [ChallengesPage] Challenge videoUrl:", challenge.videoUrl);
      
      // Set challenge ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ hi·ªÉn th·ªã ·ªü "Your Current Challenge"
      setSelectedChallenge(challenge)
      
      toast({
        title: "Challenge started",
        description: `Started: ${challenge.title}`,
      })
      
      // Scroll l√™n top ƒë·ªÉ user c√≥ th·ªÉ th·∫•y "Your Current Challenge"
      window.scrollTo({ top: 0, behavior: 'smooth' })
    } else {
      console.error("‚ùå [ChallengesPage] Challenge not found with ID:", id);
      toast({
        title: "Error",
        description: "Challenge not found",
        variant: "destructive",
      })
    }
  }

  // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
  if (loading) {
    return (
      <div className="flex min-h-screen flex-col bg-gradient-to-b from-background via-background to-background/80 dark:from-background dark:via-background/90 dark:to-background/80">
        <MainHeader mobileMenuOpen={mobileMenuOpen} setMobileMenuOpen={setMobileMenuOpen} />
        <div className="container py-8 flex-1">
          <div className="flex flex-col items-center justify-center min-h-[60vh]">
            <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
            <p className="text-lg text-muted-foreground">Loading challenges...</p>
            <p className="text-sm text-muted-foreground mt-2">
              This may take a moment as we prepare your personalized challenges
            </p>
          </div>
        </div>
        <footer className="border-t border-white/10 dark:border-gray-800/10 bg-white/40 dark:bg-gray-900/40 backdrop-blur-xl">
          <div className="container py-8">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
              <div>
                <div className="flex items-center gap-2 mb-4">
                  <div className="relative">
                    <div className="absolute -inset-1 rounded-full bg-gradient-to-r from-neo-mint to-purist-blue blur-sm opacity-70"></div>
                    <BookOpen className="relative h-6 w-6 text-neo-mint dark:text-purist-blue" />
                  </div>
                  <span className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-neo-mint to-purist-blue">
                    EnglishMastery
                  </span>
                </div>
                <p className="text-sm text-muted-foreground">
                  Master English through our innovative 4-Skill Video Crucible methodology. Practice listening,
                  speaking, reading, and writing in an engaging community.
                </p>
              </div>
              <div>
                <h3 className="font-bold mb-4">Quick Links</h3>
                <ul className="space-y-2 text-sm">
                  <li>
                    <Link href="/" className="text-muted-foreground hover:text-foreground transition-colors">
                      Home
                    </Link>
                  </li>
                  <li>
                    <Link href="/challenges" className="text-muted-foreground hover:text-foreground transition-colors">
                      Challenges
                    </Link>
                  </li>
                  <li>
                    <Link href="/community" className="text-muted-foreground hover:text-foreground transition-colors">
                      Community
                    </Link>
                  </li>
                  <li>
                    <Link href="/resources" className="text-muted-foreground hover:text-foreground transition-colors">
                      Resources
                    </Link>
                  </li>
                </ul>
              </div>
              <div>
                <h3 className="font-bold mb-4">Support</h3>
                <ul className="space-y-2 text-sm">
                  <li>
                    <Link href="/help" className="text-muted-foreground hover:text-foreground transition-colors">
                      Help Center
                    </Link>
                  </li>
                  <li>
                    <Link href="/contact" className="text-muted-foreground hover:text-foreground transition-colors">
                      Contact Us
                    </Link>
                  </li>
                  <li>
                    <Link href="/faq" className="text-muted-foreground hover:text-foreground transition-colors">
                      FAQ
                    </Link>
                  </li>
                  <li>
                    <Link href="/privacy" className="text-muted-foreground hover:text-foreground transition-colors">
                      Privacy Policy
                    </Link>
                  </li>
                </ul>
              </div>
              <div>
                <h3 className="font-bold mb-4">Subscribe</h3>
                <p className="text-sm text-muted-foreground mb-2">Get the latest updates and news</p>
                <div className="flex gap-2">
                  <div className="relative flex-1">
                    <Input
                      placeholder="Your email"
                      className="bg-white/20 dark:bg-gray-800/20 backdrop-blur-sm border-white/20 dark:border-gray-700/20"
                    />
                  </div>
                  <Button className="bg-gradient-to-r from-neo-mint to-purist-blue hover:from-neo-mint/90 hover:to-purist-blue/90 text-white border-0">
                    Subscribe
                  </Button>
                </div>
              </div>
            </div>
            <div className="border-t border-white/10 dark:border-gray-800/10 mt-8 pt-8 text-center text-sm text-muted-foreground">
              <p>¬© 2025 EnglishMastery. All rights reserved.</p>
            </div>
          </div>
        </footer>
      </div>
    )
  }

  return (
    <div className="flex min-h-screen flex-col bg-gradient-to-b from-background via-background to-background/80 dark:from-background dark:via-background/90 dark:to-background/80">
      <MainHeader mobileMenuOpen={mobileMenuOpen} setMobileMenuOpen={setMobileMenuOpen} />
      <div className="container py-8 flex-1">
        <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4 mb-8">
          <div>
            <h1 className="text-3xl font-bold">Challenges</h1>
            <p className="text-muted-foreground">Practice your English with our video challenges</p>
          </div>
          <div className="flex gap-2 w-full md:w-auto">
            <div className="relative flex-1 md:flex-initial">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input
                type="search"
                placeholder="Search challenges..."
                className="pl-8 w-full"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </div>
            <Button variant="outline">
              <Filter className="h-4 w-4 mr-2" />
              Filter
            </Button>
            <Button
              onClick={() => setCreateModalOpen(true)}
              className="bg-gradient-to-r from-neo-mint to-purist-blue text-white"
            >
              <Plus className="h-4 w-4 mr-2" />
              Create
            </Button>
          </div>
        </div>

        {(selectedChallenge || currentChallenge) && (
          <div className="mb-8">
            <h2 className="text-xl font-bold mb-4">Your Current Challenge</h2>
            {(() => {
              const challenge = selectedChallenge || currentChallenge;
              console.log("üöÄ [ChallengesPage] Rendering AssignedTask with challenge:", challenge);
              console.log("üìπ [ChallengesPage] Challenge videoUrl:", challenge?.videoUrl);
              console.log("üéØ [ChallengesPage] Selected challenge:", selectedChallenge);
              console.log("üìÖ [ChallengesPage] Current challenge:", currentChallenge);
              return (
                <AssignedTask
                  key={challenge!.id} // Add key to force re-render when challenge changes
                  title={challenge!.title}
                  description={challenge!.description}
                  videoUrl={challenge!.videoUrl}
                  dueDate="2025-04-05"
                  // Don't pass userId to force using original component
                />
              );
            })()}
          </div>
        )}        <Tabs defaultValue="daily" value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-6">
            <TabsTrigger value="daily">Daily</TabsTrigger>
            <TabsTrigger value="all">All</TabsTrigger>
            <TabsTrigger value="user">Your Challenges</TabsTrigger>
            <TabsTrigger value="beginner">Beginner</TabsTrigger>
            <TabsTrigger value="intermediate">Intermediate</TabsTrigger>
            <TabsTrigger value="advanced">Advanced</TabsTrigger>
          </TabsList><TabsContent value="daily" className="mt-6">
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-foreground">Today's Daily Challenges</h3>
              <p className="text-sm text-muted-foreground">Fresh video challenges updated daily ‚Ä¢ {dailyChallenges.length} available</p>
            </div>
            <OptimizedChallengeGrid
              challenges={dailyChallenges}
              onStartChallenge={handleStartChallenge}
              loading={loading}
              emptyMessage="No daily challenges available today"
              emptyAction={() => window.location.reload()}
              emptyActionLabel="Refresh"
              useVirtualScroll={dailyChallenges.length > 20}
            />
          </TabsContent>          <TabsContent value="user" className="mt-6">
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-foreground">Your Created Challenges</h3>
              <p className="text-sm text-muted-foreground">Challenges you've created ‚Ä¢ {userChallenges.length} available</p>
            </div>
            <OptimizedChallengeGrid
              challenges={userChallenges}
              onStartChallenge={handleStartChallenge}
              loading={loading}
              emptyMessage="You haven't created any challenges yet"
              emptyAction={() => setCreateModalOpen(true)}
              emptyActionLabel="Create Your First Challenge"
              useVirtualScroll={userChallenges.length > 20}
            />
          </TabsContent><TabsContent value="all" className="mt-6">
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-foreground">All Challenges</h3>
              <p className="text-sm text-muted-foreground">Daily + User challenges ‚Ä¢ {challenges.length} total</p>
            </div>            <OptimizedChallengeGrid
              challenges={displayedChallenges}
              onStartChallenge={handleStartChallenge}
              loading={loading}
              emptyMessage="No challenges found matching your criteria"
              emptyAction={() => setCreateModalOpen(true)}
              emptyActionLabel="Create a Challenge"
              useVirtualScroll={displayedChallenges.length > 20}
              useInfiniteScroll={false}
            />
          </TabsContent>          <TabsContent value="beginner" className="mt-6">
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-foreground">Beginner Challenges</h3>              <p className="text-sm text-muted-foreground">Perfect for starting your English journey ‚Ä¢ {displayedChallenges.length} available</p>
            </div>
            <OptimizedChallengeGrid
              challenges={displayedChallenges}
              onStartChallenge={handleStartChallenge}
              loading={loading}
              emptyMessage="No beginner challenges found"
              emptyAction={() => setCreateModalOpen(true)}
              emptyActionLabel="Create a Beginner Challenge"
              useVirtualScroll={displayedChallenges.length > 20}
            />
          </TabsContent><TabsContent value="intermediate" className="mt-6">
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-foreground">Intermediate Challenges</h3>              <p className="text-sm text-muted-foreground">Level up your skills ‚Ä¢ {displayedChallenges.length} available</p>
            </div>
            <OptimizedChallengeGrid
              challenges={displayedChallenges}
              onStartChallenge={handleStartChallenge}
              loading={loading}
              emptyMessage="No intermediate challenges found"
              emptyAction={() => setCreateModalOpen(true)}
              emptyActionLabel="Create an Intermediate Challenge"
              useVirtualScroll={displayedChallenges.length > 20}
            />
          </TabsContent>          <TabsContent value="advanced" className="mt-6">
            <div className="mb-4">
              <h3 className="text-lg font-semibold text-foreground">Advanced Challenges</h3>              <p className="text-sm text-muted-foreground">Master-level challenges ‚Ä¢ {displayedChallenges.length} available</p>
            </div>
            <OptimizedChallengeGrid
              challenges={displayedChallenges}
              onStartChallenge={handleStartChallenge}
              loading={loading}
              emptyMessage="No advanced challenges found"
              emptyAction={() => setCreateModalOpen(true)}
              emptyActionLabel="Create an Advanced Challenge"
              useVirtualScroll={displayedChallenges.length > 20}
            />
          </TabsContent>
        </Tabs>

        <CreateChallengeModal
          open={createModalOpen}
          onOpenChange={setCreateModalOpen}
          onChallengeCreated={handleChallengeCreated}
        />

        {/* Floating Chat Icon */}
        <div
          onClick={() => {
            setShowChatBox(true)
            setMinimizedChat(!minimizedChat)
          }}
          style={{ display: "inline-block" }}
        >
          <AIChatButton />
        </div>


      </div>
      <footer className="border-t border-white/10 dark:border-gray-800/10 bg-white/40 dark:bg-gray-900/40 backdrop-blur-xl">
        <div className="container py-8">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
            <div>
              <div className="flex items-center gap-2 mb-4">
                <div className="relative">
                  <div className="absolute -inset-1 rounded-full bg-gradient-to-r from-neo-mint to-purist-blue blur-sm opacity-70"></div>
                  <BookOpen className="relative h-6 w-6 text-neo-mint dark:text-purist-blue" />
                </div>
                <span className="text-xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-neo-mint to-purist-blue">
                  EnglishMastery
                </span>
              </div>
              <p className="text-sm text-muted-foreground">
                Master English through our innovative 4-Skill Video Crucible methodology. Practice listening, speaking,
                reading, and writing in an engaging community.
              </p>
            </div>
            <div>
              <h3 className="font-bold mb-4">Quick Links</h3>
              <ul className="space-y-2 text-sm">
                <li>
                  <Link href="/" className="text-muted-foreground hover:text-foreground transition-colors">
                    Home
                  </Link>
                </li>
                <li>
                  <Link href="/challenges" className="text-muted-foreground hover:text-foreground transition-colors">
                    Challenges
                  </Link>
                </li>
                <li>
                  <Link href="/community" className="text-muted-foreground hover:text-foreground transition-colors">
                    Community
                  </Link>
                </li>
                <li>
                  <Link href="/resources" className="text-muted-foreground hover:text-foreground transition-colors">
                    Resources
                  </Link>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="font-bold mb-4">Support</h3>
              <ul className="space-y-2 text-sm">
                <li>
                  <Link href="/help" className="text-muted-foreground hover:text-foreground transition-colors">
                    Help Center
                  </Link>
                </li>
                <li>
                  <Link href="/contact" className="text-muted-foreground hover:text-foreground transition-colors">
                    Contact Us
                  </Link>
                </li>
                <li>
                  <Link href="/faq" className="text-muted-foreground hover:text-foreground transition-colors">
                    FAQ
                  </Link>
                </li>
                <li>
                  <Link href="/privacy" className="text-muted-foreground hover:text-foreground transition-colors">
                    Privacy Policy
                  </Link>
                </li>
              </ul>
            </div>
            <div>
              <h3 className="font-bold mb-4">Subscribe</h3>
              <p className="text-sm text-muted-foreground mb-2">Get the latest updates and news</p>
              <div className="flex gap-2">
                <div className="relative flex-1">
                  <Input
                    placeholder="Your email"
                    className="bg-white/20 dark:bg-gray-800/20 backdrop-blur-sm border-white/20 dark:border-gray-700/20"
                  />
                </div>
                <Button className="bg-gradient-to-r from-neo-mint to-purist-blue hover:from-neo-mint/90 hover:to-purist-blue/90 text-white border-0">
                  Subscribe
                </Button>
              </div>
            </div>
          </div>
          <div className="border-t border-white/10 dark:border-gray-800/10 mt-8 pt-8 text-center text-sm text-muted-foreground">
            <p>¬© 2025 EnglishMastery. All rights reserved.</p>
          </div>
        </div>
      </footer>
    </div>
  )
}
